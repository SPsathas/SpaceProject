function  JUNO_read_B_prel(filename,startRow,endRow)
%IMPORTFILE1 Import numeric data from a text file as column vectors.
%   [OBJECT,VARNAME2,VARNAME3,FIL,E,VARNAME6,DOY,BX,BY,BZ,VARNAME11,X,Y,Z]
%   = IMPORTFILE1(FILENAME) Reads data from text file FILENAME for the
%   default selection.
%
%   [OBJECT,VARNAME2,VARNAME3,FIL,E,VARNAME6,DOY,BX,BY,BZ,VARNAME11,X,Y,Z]
%   = IMPORTFILE1(FILENAME, STARTROW, ENDROW) Reads data from rows STARTROW
%   through ENDROW of text file FILENAME.
%
% Example:
%   [OBJECT,VarName2,VarName3,FIL,E,VarName6,doy,Bx,By,Bz,VarName11,x,y,z] = importfile1('fgm_jno_l3_2017272pc_v01.sts',115, 691314);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2021/08/04 18:15:38

global epochBprel doyprel Bxprel Byprel Bzprel xprel yprel zprel;

%% Initialize variables.
if nargin<=2
    %startRow = 116;
    startRow = 123;
    endRow = inf;
end

%% Format for each line of text:
%   column1: categorical (%C)
%	column2: categorical (%C)
%   column3: double (%f)
%	column4: categorical (%C)
%   column5: categorical (%C)
%	column6: categorical (%C)
%   column7: double (%f)
%	column8: double (%f)
%   column9: double (%f)
%	column10: double (%f)
%   column11: categorical (%C)
%	column12: double (%f)
%   column13: double (%f)
%	column14: double (%f)
% For more information, see the TEXTSCAN documentation.
%formatSpec = '%6C%4C%2f%6C%2C%3C%20f%11f%14f%10f%5C%15f%15f%f%[^\n\r]';
formatSpec = '%6f%4C%2f%6C%2C%3C%20f%11f%14f%10f%5C%15f%15f%f%[^\n\r]';


%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', '', 'WhiteSpace', '', 'TextType', 'string', 'EmptyValue', NaN, 'HeaderLines', startRow(1)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', '', 'WhiteSpace', '', 'TextType', 'string', 'EmptyValue', NaN, 'HeaderLines', startRow(block)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Allocate imported array to column variable names
yearprel = dataArray{:, 1};
VarName2 = dataArray{:, 2};
VarName3 = dataArray{:, 3};
FIL = dataArray{:, 4};
E = dataArray{:, 5};
VarName6 = dataArray{:, 6};
doyprel = dataArray{:, 7};
Bxprel = dataArray{:, 8};
Byprel = dataArray{:, 9};
Bzprel = dataArray{:, 10};
VarName11 = dataArray{:, 11};
xprel = dataArray{:, 12};
yprel = dataArray{:, 13};
zprel = dataArray{:, 14};

%--- Convert time
intdoy = fix(doyprel(1));
decdoy = doyprel-intdoy;
epoch0 = irf_time([yearprel(1) intdoy],'doy>epoch');
epochBprel = epoch0 + decdoy*24*3600 - 12*3600;


